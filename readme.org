#+title: UVM Statistics and Data Science Club Website

(Original README by Nicholas Hanoian, modified by Isaac Lee and Bradley Russavage)

This is a Django website which was created for use by the UVM Statistics and Data Science Club. It features a blog which can be managed through the Django administrator interface, as well as several static pages. It uses [[https://fullcalendar.io/][FullCalendar]] to embed the club's google calendar into the homepage (Google's default embedding is very ugly). 

The original logo was created using R (see logo.r) but has been updated to:

[[file:main/static/main/images/logo.svg]]

Original design files can be obtained through Katherine Merrill or Bradley Russavage @ =brussavage@gmail.com=. Questions on how the website runs can also be sent to Bradley.


* Managing the Site
Most of the site is simply static pages served through Django. These templates are, for the most part, simple html and can be found in the =main/templates/main/= directory. Static files should be stored in the =main/static/main/= folder. The dynamic aspects of the page are the blog and the calendar.

** Blog and Photos
The blog and the photo gallery are simple Django apps which store data in the site's database, and it can be modified by using the Django administrator interface. This can be accessed via https://statclub.w3.uvm.edu/admin.

It should be noted that if any new page is added to the control panel, permissions have to be dealt out under =Groups= or =Users=. =blog-manager= and =photo-manager= roles have been applied to the other club accounts so that they can post on the blog and photo gallery. 

** Calendar
The calendar shows events from the statclub@uvm.edu google account's calendar. To modify the events, simply log into the google account and go to https://calendar.google.com. Here you can create and modify calendar events, and the page will be updated automatically.

*** Notes
The following information is only relevant in the event that the calendar stops working. To modify the calendar's events, use https://calendar.google.com as described above.

The calendar requires the usage of the Google Calendar Developer API. The project belongs to the statclub@uvm.edu Google account, and is set up to only allow requests from local host (127.0.0.1) for development, and the UVM silk server (https://statclub.w3.uvm.edu/). Should the page need to be hosted on another domain, modify the API key settings on the Google Developer Console at https://console.developers.google.com. 

There is supposed to be a quota on how much this API key can be used, but this application should not reach that limit. If no events are showing up the calendar, there may be useful error messages in the browser's JavaScript console.


** Mobile Responsiveness
A number of pages have been modified since the last version to be responsive between mobile and desktop versions. In many cases, html files simply contain seperate versions of the same html code with changes that better suit desktops or mobile devices, which will be printed respective to the size of one's screen. This can be tested by pressing F12 in Google Chrome and switching to a mobile view.


* Hosting the Site

The following conditions must be satisfied for the site to run:

** Virtual Environment
To set up the python environment, first install the tool =virtualenv=:
#+BEGIN_SRC sh
pip install --user virtualenv
#+END_SRC

Then create and activate a new virtual environment:
#+BEGIN_SRC sh
virtualenv venv
source venv/bin/activate
#+END_SRC

Then install the packages specified in =requirements.txt=
#+BEGIN_SRC sh
pip install -r requirements.txt
#+END_SRC

** Installing other packages
If you need to install other packages, just make sure to activate the virtual environment first. Installing packages without activating won't effect the site.
If Django is ever updated by a future developer, =url= is deprecated and should be replaced throughout the code with =re_path=.

** SECRET_KEY
A file named =secret_key.txt= must be stored in the parent directory of where the site is stored. i.e. for deployment, assuming that the files are stored at =~/django-root/=, there must be a file at =~/secret_key.txt= with a secret key.

Similarly, 3 other files are needed: =secret_email.txt= which is used for sending emails on the backend, =secret_emp.txt= which is used for the secret email password, and =secret_apikey.txt= which is the SendGrid email API key. As stated previously, all secret .txt files should be stored in the parent/root directory: NOT the directory containing the server files. The use of the keys depends on sending emails via the backend with the normal method or SendGrid. 

** Log folder
There must be a folder located in the parent directory of where the site is stored called =django-logs=.

** Development Environment
To start the development server, activate the virtual environment (see above), and then use =manage.py= to start the server:
#+BEGIN_SRC sh
python manage.py runserver
#+END_SRC

** Development Testing
If using code directly from this GitHub repo, you might have to create your own admin account. Otherwise, you can use the admin account provided by Katherine.
To do so, run 
#+BEGIN_SRC sh
python manage.py createsuperuser
#+END_SRC

If you want to create a posting page similar to the blog or the photo gallery, run the command 
#+BEGIN_SRC sh
python manage.py startapp page_name_here
#+END_SRC
You'll also need to do additional linking to register the page in the admin control panel and page rendering.

If you update any of the models, make sure you run
#+BEGIN_SRC sh
python manage.py makemigrations
python manage.py migrate
#+END_SRC


** Accessing the server files
Since the website uses Silk, you can ssh or SFTP using =statclub@w3.uvm.edu=. The password can be obtained from Katherine.

** Deployment
=deploy.sh= in the root of the project can be used to deploy the site. This uploads the relevant files to =~/django-root=, as well as the static files to =~/www-root/static=. If the static files change, you must manually run =python manage.py collectstatic=.

*Important*: If you choose to do this manually, do not upload =db.sqlite3= or the =media= folder as this will overwrite the server's database and media.

A =.htaccess= file is included in the project and should be uploaded along with the rest of the project. This is set up to work with Phusion Passenger on UVM's silk v2 server. It ensures that https protocol is used and specifies to Passenger how to start the application. It assumes that the Django project is located in =~/django-root=, and that it is being served from the =~/www-root= folder. If there are problems with the server starting the application, edit this file, and change =PassengerAppEnv production= to =PassengerAppEnv development=. This will give a traceback if the application cannot be started.

In order to reload the website after uploading new files, use the following command in the directory for the website to kill the wsgi-loader:
#+BEGIN_SRC sh
pkill -u statclub -f wsgi-loader
#+END_SRC

Reloading the website in your browser will the execute .htaccess, which will then run your newly uploaded files.

** Making backups
Backups of the database (db.sqlite3) as well as the media folder should be made periodically to minimize potential data loss.
